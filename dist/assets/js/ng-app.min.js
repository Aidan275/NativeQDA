(function () {
	
	angular.module('nativeQDAApp', ['ngRoute', 'ngSanitize', 'ngTable', 'ui.bootstrap', 'ui.bootstrap.datepicker', 'rzModule', 'ngFileUpload', 'ngTagsInput', 'jp.ng-bs-animated-button']);

	config.$inject = ['$routeProvider', '$locationProvider'];
	function config ($routeProvider, $locationProvider) {
		$routeProvider
		.when('/login', {
			templateUrl: '/pages/auth/login/login.view.html',
			controller: 'loginCtrl',
			controllerAs: 'vm',
			loginRequired: false
		})
		.when('/register', {
			templateUrl: '/pages/auth/register/register.view.html',
			controller: 'registerCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/forgot-password', {
			templateUrl: '/pages/auth/forgotPass/forgotPass.view.html',
			controller: 'forgotPassCtrl',
			controllerAs: 'vm',
			loginRequired: false
		})
		.when('/', {
			templateUrl: '/pages/home/home.view.html',
			controller: 'homeCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/analysis/map', {
			templateUrl: '/pages/analysis/map/map.view.html',
			controller: 'mapCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/analysis/data', {
			templateUrl: '/pages/analysis/data/data.view.html',
			controller: 'dataCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/analysis/visualisation', {
			templateUrl: '/pages/analysis/visualisation/visualisation.view.html',
			controller: 'visualisationCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/survey', {
			templateUrl: '/pages/survey/survey.view.html',
			controller: 'surveyCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/files', {
			templateUrl: '/pages/files/files.view.html',
			controller: 'filesCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/settings', {
			templateUrl: '/pages/settings/settings.view.html',
			controller: 'settingsCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.when('/complete-survey', {
			templateUrl: '/pages/survey/completeSurvey/completeSurvey.view.html',
			controller: 'CompleteSurveyCtrl',
			controllerAs: 'vm',
			loginRequired: false
		})
		.when('/heatmap-example', {
			templateUrl: '/pages/heatmapExample/heatmapExample.view.html',
			controller: 'heatmapCtrl',
			controllerAs: 'vm',
			loginRequired: true
		})
		.otherwise({redirectTo: '/'});

	    // use the HTML5 History API
	    $locationProvider.html5Mode(true);
	}

	function run ($rootScope, $location, authentication) {
		$rootScope.$on("$routeChangeStart", function(event, nextRoute, currentRoute) {
			var postLogInRoute;
			if(nextRoute.loginRequired && !authentication.isLoggedIn()){
				postLogInRoute = $location.path();
				$location.path('/login').replace();
				$location.search('page', postLogInRoute);
			} else if (nextRoute.loginRequired && authentication.isLoggedIn()) {
				$location.path(postLogInRoute).replace();
				postLogInRoute = null;
			} 
		});
	}

	angular
	.module('nativeQDAApp')
	.config(['$routeProvider', '$locationProvider', config])
	.run(['$rootScope', '$location', 'authentication', run]);

})();
(function() {

    'use strict';

    angular
    .module('nativeQDAApp')
    .config(configure);

    configure.$inject = ['$qProvider', '$logProvider'];
    function configure ($qProvider, $logProvider) {

        // Disables console errors for unhandled rejections since 
        // these are being caught in the services and processed by
        // the exception service
        $qProvider.errorOnUnhandledRejections(true);

        // toastr config
        toastr.options.closeButton = true;
        toastr.options.timeOut = 3000;
        toastr.options.positionClass = 'toast-top-right';

        // Turn debugging off/on (no info or warn)
        if ($logProvider.debugEnabled) {
            $logProvider.debugEnabled(true);
        }    
    }

})();
(function() {
	'use strict';

	angular
	.module('nativeQDAApp')
	.service('exception', exception);

	exception.$inject = ['$q', 'logger'];
	function exception($q, logger) {
		return {
			catcher: catcher
		};

		///////////////////////////

		function catcher(message) {
			return function(err) {
				var thrownDescription;
				var newMessage;

				// if message parameter passed, add a new line to the end of the message
				if (message) 
					message += '\n';

				if (err.data && err.data.description) {
					newMessage = message + err.data.description;
					err.data.description = newMessage;
				} else if (err.data && err.data.message){	 // For S3 errors with err.data.message
					newMessage = message + err.data.message;
					err.data.message = newMessage;
				} else if (err.data && err.data.errmsg){	 // For DB errors with err.data.errmsg
					if(err.data.code === 11000) {			// if duplicate key error - must be existing email in DB 
						newMessage = message + 'Email already exists in the database';
					} else {
						newMessage = message + err.data.errmsg;
						err.data.errmsg = newMessage;
					}
				}

				logger.error(newMessage, err, 'Error');
				return $q.reject(err);
			};
		}
	}
})();
(function() {
    'use strict';

    angular
    .module('nativeQDAApp')
    .service('logger', logger);

    logger.$inject = ['$log'];
    function logger($log) {
        return {
            showToasts: true,

            error   : error,
            info    : info,
            success : success,
            warning : warning,

            // straight to console; bypass toastr
            log     : $log.log
        };

        ///////////////////////////

        function error(message, data, title) {
            toastr.error(message, title);
            $log.error('Error: ' + message, data);
        }

        function info(message, data, title) {
            toastr.info(message, title);
            $log.info('Info: ' + message, data);
        }

        function success(message, data, title) {
            toastr.success(message, title);
            $log.info('Success: ' + message, data);
        }

        function warning(message, data, title) {
            toastr.warning(message, title);
            $log.warn('Warning: ' + message, data);
        }
    }
}());
(function () {

	'use strict';

	angular
	.module('nativeQDAApp')
	.service('filesService', filesService);

	filesService.$inject = ['$http', 'authentication', 'exception'];
	function filesService ($http, authentication, exception) {
		return {
			signUploadS3	: signUploadS3,
			addFileDB		: addFileDB,
			signDownloadS3	: signDownloadS3,
			getFileListS3	: getFileListS3,
			getFileListDB	: getFileListDB,
			deleteFileS3	: deleteFileS3,
			deleteFileDB	: deleteFileDB,
			fileReadOneDB	: fileReadOneDB,
			objectAclS3		: objectAclS3,
			objectAclDB		: objectAclDB,
			syncDBwithS3	: syncDBwithS3
		};

        ///////////////////////////

        function signUploadS3(query){
        	return $http.post('/api/files/signUploadS3', query, {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(signUploadS3Complete)
        	.catch(signUploadS3Failed);

        	function signUploadS3Complete(data) { return data; }
        	function signUploadS3Failed(e) { return exception.catcher('XHR Failed for signUploadS3')(e); }
        };

        function addFileDB(fileInfo){
        	return $http.post('/api/files/addFileDB', fileInfo, {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(addFileDBComplete)
        	.catch(addFileDBFailed);

        	function addFileDBComplete(data) { return data; }
        	function addFileDBFailed(e) { return exception.catcher('XHR Failed for addFileDB')(e); }
        };

        function signDownloadS3(key){
        	return $http.get('/api/files/signDownloadS3?key=' + key, {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(signDownloadS3Complete)
        	.catch(signDownloadS3Failed);

        	function signDownloadS3Complete(data) { return data; }
        	function signDownloadS3Failed(e) { return exception.catcher('XHR Failed for signDownloadS3')(e); }
        };

        function fileReadOneDB(key){
        	return $http.get('/api/files/fileReadOneDB?key=' + key, {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(fileReadOneDBComplete)
        	.catch(fileReadOneDBFailed);

        	function fileReadOneDBComplete(data) { return data; }
        	function fileReadOneDBFailed(e) { return exception.catcher('XHR Failed for fileReadOneDB')(e); }
        };

        function getFileListS3(){
        	return $http.get('/api/files/getFileListS3', {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(getFileListS3Complete)
        	.catch(getFileListS3Failed);

        	function getFileListS3Complete(data) { return data; }
        	function getFileListS3Failed(e) { return exception.catcher('XHR Failed for getFileListS3')(e); }
        };

        function getFileListDB(){
        	return $http.get('/api/files/getFileListDB', {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(getFileListDBComplete)
        	.catch(getFileListDBFailed);

        	function getFileListDBComplete(data) { return data; }
        	function getFileListDBFailed(e) { return exception.catcher('XHR Failed for getFileListDB')(e); }
        };

        function deleteFileS3(key){
        	return $http.post('/api/files/deleteFileS3', key, {
        		headers: {
        			Authorization: 'Bearer ' + authentication.getToken()
        		}
        	}).then(deleteFileS3Complete)
        	.catch(deleteFileS3Failed);

        	function deleteFileS3Complete(data) { return data; }
        	function deleteFileS3Failed(e) { return exception.catcher('XHR Failed for deleteFileS3')(e); }
        };

        function deleteFileDB(key){
        	return $http.delete('/api/files/deleteFileDB?key=' + key, {
        		headers: {
        			Authorization: 'Bearer '+ authentication.getToken()
        		}
        	}).then(deleteFileDBComplete)
        	.catch(deleteFileDBFailed);

        	function deleteFileDBComplete(data) { return data; }
        	function deleteFileDBFailed(e) { return exception.catcher('XHR Failed for deleteFileDB')(e); }
        };

        function objectAclS3(objectData) {
        	return $http.post('/api/files/objectAclS3', objectData, {
        		headers: {
        			Authorization: 'Bearer '+ authentication.getToken()
        		}
        	}).then(objectAclS3Complete)
        	.catch(objectAclS3Failed);

        	function objectAclS3Complete(data) { return data; }
        	function objectAclS3Failed(e) { return exception.catcher('XHR Failed for objectAclS3')(e); }
        }

        function objectAclDB(objectData) {
        	return $http.post('/api/files/objectAclDB', objectData, {
        		headers: {
        			Authorization: 'Bearer '+ authentication.getToken()
        		}
        	}).then(objectAclDBComplete)
        	.catch(objectAclDBFailed);

        	function objectAclDBComplete(data) { return data; }
        	function objectAclDBFailed(e) { return exception.catcher('XHR Failed for objectAclDB')(e); }
        }

        function syncDBwithS3(key){
        	return $http.post('/api/files/syncDBwithS3', key, {
        		headers: {
        			Authorization: 'Bearer '+ authentication.getToken()
        		}
        	}).then(syncDBwithS3Complete)
        	.catch(syncDBwithS3Failed);

        	function syncDBwithS3Complete(data) { return data; }
        	function syncDBwithS3Failed(e) { return exception.catcher('XHR Failed for syncDBwithS3')(e); }
        };
    }

})();
(function () {

	angular
	.module('nativeQDAApp')
	.service('datasetService', datasetService);

	datasetService.$inject = ['$http', 'authentication', 'exception'];
	function datasetService ($http, authentication, exception) {
		return {
			datasetCreate	: datasetCreate,
			listDatasets	: listDatasets,
			datasetReadOne	: datasetReadOne,
			datasetDeleteOne: datasetDeleteOne
		};

		// Creates a dataset with a name and dexcription
		function datasetCreate(dataset){
			return $http.post('/api/analysis/data/create', dataset, {
				headers: {
					Authorization: 'Bearer '+ authentication.getToken()
				}
			}).then(datasetCreateComplete)
        	.catch(datasetCreateFailed);

        	function datasetCreateComplete(data) { return data; }
        	function datasetCreateFailed(e) { return exception.catcher('XHR Failed for datasetCreate')(e); }
		};

		function listDatasets(){
			return $http.get('/api/analysis/data/list', {
				headers: {
					Authorization: 'Bearer '+ authentication.getToken()
				}
			}).then(listDatasetsComplete)
        	.catch(listDatasetsFailed);

        	function listDatasetsComplete(data) { return data; }
        	function listDatasetsFailed(e) { return exception.catcher('XHR Failed for listDatasets')(e); }
		};

		function datasetReadOne(datasetid){
			return $http.get('/api/analysis/data/read/' + datasetid, {
				headers: {
					Authorization: 'Bearer '+ authentication.getToken()
				}
			}).then(datasetReadOneComplete)
        	.catch(datasetReadOneFailed);

        	function datasetReadOneComplete(data) { return data; }
        	function datasetReadOneFailed(e) { return exception.catcher('XHR Failed for datasetReadOne')(e); }
		};

		function datasetDeleteOne(datasetid){
			return $http.delete('/api/analysis/data/delete/' + datasetid, {
				headers: {
					Authorization: 'Bearer '+ authentication.getToken()
				}
			}).then(datasetDeleteOneComplete)
        	.catch(datasetDeleteOneFailed);

        	function datasetDeleteOneComplete(data) { return data; }
        	function datasetDeleteOneFailed(e) { return exception.catcher('XHR Failed for datasetDeleteOne')(e); }
		};
	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.service('authentication', authentication);

	authentication.$inject = ['$http', '$window', 'exception'];
	function authentication ($http, $window, exception) {
		return {
			currentUser	: currentUser,
			saveToken	: saveToken,
			getToken	: getToken,
			isLoggedIn	: isLoggedIn,
			register	: register,
			login		: login,
			logout		: logout
		};

		// Saves a JSON Web Token (JWT) to the browser's local storage
		function saveToken(token) {
			$window.localStorage['nativeQDA-token'] = token;
		};

		// Gets the JWT from the browser's local storage
		function getToken() {
			return $window.localStorage['nativeQDA-token'];
		};

		// Checks if the user is logged in by getting the JWT and checking its expiry date against the current date
		// This FUNCTION can be fooled with a token named 'nativeQDA-token' and a valid expiry date but for any requests 
		// to the server using the APIs, the user's jwt will be checked and denied if not genuine.
		function isLoggedIn() {
			var token = getToken();
			if(token){
				var payload = JSON.parse($window.atob(token.split('.')[1]));
				return payload.exp > Date.now() / 1000;	// Date.now() retrieves the epoch timestamp in milliseconds so must divide by 1000 for seconds
			} else {
				return false;	// Returns false if no token is found
			}
		};

		// Checks if logged in then returns the user's name and email from the JWT
		function currentUser() {
			if(isLoggedIn()){
				var token = getToken();
				var payload = JSON.parse($window.atob(token.split('.')[1]));
				return {
					email	: payload.email,
					name	: payload.name
				};
			}
		};

		function register(user) {
			return $http.post('/api/register', user)
			.then(registerComplete)
			.catch(registerFailed);

			function registerComplete(data) { saveToken(data.data.token); }
			function registerFailed(e) { return exception.catcher('Registration Failed')(e); }
		};

		function login(user) {
			return $http.post('/api/login', user)
			.then(loginComplete)
			.catch(loginFailed);

			function loginComplete(data) { saveToken(data.data.token); }
			function loginFailed(e) { return exception.catcher('Login Failed')(e); }
		};
		
		function logout(userInfo) {
			$window.localStorage.removeItem('nativeQDA-token');
			return $http.post('/api/event', userInfo);
		};
	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.service('events', events);

	events.$inject = ['$http'];
	function events ($http) {
		return {
			event: event
		};

		///////////////////////////

		function event(userInfo){
			return $http.post('/api/event', userInfo);
		};
	}

})();
(function () {

	'use strict';

	angular
	.module('nativeQDAApp')
	.service('mapService', mapService);

	mapService.$inject = ['logger'];
	function mapService (logger) {
		return {
			getPosition : getPosition
		};

		///////////////////////////

		// ============== OLD GOOGLE MAPS FUNCTION ============== //
		// ================== USING LEAFLET NOW ================= //
		
		function getPosition(cbSuccess) {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(cbSuccess, cbError);
			}
			else {
				cbNoGeo();
			}

			function cbError(error) {
				if(error.code == 1)
					logger.warning(error.message, error, 'Warning');
				else
					logger.error(error.message, error, 'Error');
			}

			function cbNoGeo() {
				logger.error('Geolocation is not supported by this browser', 'Error', 'Error');
			}
		};
	}

})();


(function () {

	angular
	.module('nativeQDAApp')
	.controller('navigationCtrl', navigationCtrl);

	navigationCtrl.$inject = ['$location', 'authentication', 'events'];
	function navigationCtrl($location, authentication, events) {
		var vm = this;

		// Bindable Functions
		vm.logout = logout;

		// Bindable Data
		vm.currentPath = $location.path();
		vm.isLoggedIn = authentication.isLoggedIn();
		vm.currentUser = authentication.currentUser();


		///////////////////////////

		// Stores the user's email, current page, and time in the database for analytics
		events.event({email : authentication.currentUser().email});

		function logout() {
			authentication.logout({
				email : authentication.currentUser().email,
				desc : "Logout"
			});
			$location.path('/login');
		};

	}
})();
(function () {
	angular
	.module('nativeQDAApp')
	.directive('navigation', navigation);
	
	function navigation () {
		return {
			restrict: 'EA',
			templateUrl: '/common/directives/navigation/navigation.template.html',
			controller: 'navigationCtrl as navvm'
		};
	}
})();
(function () {
	angular
	.module('nativeQDAApp')
	.directive('footerGeneric', footerGeneric);
	
	function footerGeneric () {
		return {
			restrict: 'EA',
			templateUrl: '/common/directives/footerGeneric/footerGeneric.template.html'
		};
	}
})();
(function () {
	angular
	.module('nativeQDAApp')
	.directive('pageHeader', pageHeader);
	
	function pageHeader () {
		return {
			restrict: 'EA',
			scope: {
				content : '=content'
			},
			templateUrl: '/common/directives/pageHeader/pageHeader.template.html'
		};
	}
})();
(function () { 

	angular
	.module('nativeQDAApp')
	.filter('formatDistance', formatDistance);

	var _isNumeric = function (n) {
		return !isNaN(parseFloat(n)) && isFinite(n);
	};

	function formatDistance () {
		return function (distance) {
			var numDistance = distance/1000;
			var unit;
			if (distance && _isNumeric(distance)) {
				if (numDistance > 1) {
					numDistance = parseFloat(numDistance).toFixed(1);
					unit = ' km';
				} else {
					numDistance = parseInt(numDistance * 1000, 10).toFixed(1);
					unit = ' m';
				}
				return numDistance + unit;
			} else {
				return "?";
			}
		};
	}

})();
(function () {
	angular
	.module('nativeQDAApp')
	.filter('addHtmlLineBreaks', addHtmlLineBreaks);

	function addHtmlLineBreaks () {
		return function (text) {
			var output = text.replace(/\n/g, '<br/>');
			return output;
		};
	}
	
})();
(function () {

	angular
	.module('nativeQDAApp')
	.filter('formatFileSize', formatFileSize);

	function formatFileSize () {
		return function(bytes, precision) {
			if (bytes === 0 || isNaN(parseFloat(bytes)) || !isFinite(bytes)) {
				return '-';
			}

			if (typeof precision === 'undefined') {
				precision = 1;
			}

			var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],
			number = Math.floor(Math.log(bytes) / Math.log(1024));

			return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) +  ' ' + units[number];
		}
	}

})();
(function () { 

	"use strict";

	angular
	.module('nativeQDAApp')
	.controller('homeCtrl', homeCtrl);
	
	homeCtrl.$inject = ['mapService', 'filesService', '$scope', '$filter', '$compile', '$window', '$uibModal', 'logger'];
	function homeCtrl (mapService, filesService, $scope, $filter, $compile, $window, $uibModal, logger) {
		var vm = this;

		// Bindable Functions
		vm.getFileList = getFileList;
		vm.viewFile = viewFile;
		vm.popupFileDetails = popupFileDetails;
		vm.confirmDelete = confirmDelete;
		
		var lat = -34.4054039;	// Default position is UOW
		var lng = 150.87842999999998;
		var fileList = null;
		var map = null;
		var kangarooMarkers = [];
		var kiwiMarkers = [];
		var kaguMarkers = [];
		var kangarooMarkerCluster = null;
		var kiwiMarkerCluster = null;
		var kaguMarkerCluster = null;
		vm.pageHeader = {
			title: 'Dashboard',
			strapline: 'summary of recent activity'
		};

		activate();

    	///////////////////////////

    	function activate() {
    		initMap(lat, lng);
    	}

    	function initMap(lat, lng) {
    		var position = new google.maps.LatLng(lat, lng);
    		var mapCanvas = document.getElementById('map-homepage');
    		var mapOptions = {
    			center: position,
    			zoom: 4,
    			panControl: false,
    			mapTypeId: google.maps.MapTypeId.ROADMAP,
    			mapTypeControl: true,
    			mapTypeControlOptions: {
    				style: google.maps.MapTypeControlStyle.DEFAULT,
    				position: google.maps.ControlPosition.TOP_RIGHT
    			}
    		}

    		map = new google.maps.Map(mapCanvas, mapOptions);

    		mapService.getPosition(getGeoData);
    		getFileList();
    	}

		// If getPosition returns successfully load the map at the users position
		function getGeoData(position) {
			lat = position.coords.latitude;
			lng = position.coords.longitude;
			updateUserPos();
		}

		function updateUserPos() {
			var userPos = new google.maps.LatLng(lat, lng);
			var marker = new google.maps.Marker({
				position: userPos,
				map: map,
				title: 'Your Position'
			});
			map.setZoom(13);
			map.panTo(userPos);
		}

    	// Gets all the files from the MongoDB database to be displayed on the map
    	function getFileList() {
    		filesService.getFileListDB()
    		.then(function(response) {
    			fileList = response.data;
    			clearMarkers();
    			addMapMarkers();
    		});
    	}

    	function clearMarkers() {
    		for (var i = 0; i < kangarooMarkers.length; i++) {
    			kangarooMarkers[i].setMap(null);
    		}
    		for (var i = 0; i < kiwiMarkers.length; i++) {
    			kiwiMarkers[i].setMap(null);
    		}
    		for (var i = 0; i < kaguMarkers.length; i++) {
    			kaguMarkers[i].setMap(null);
    		}
    		kangarooMarkers = [];
    		kiwiMarkers = [];
    		kaguMarkers = [];
    		if(kangarooMarkerCluster)
    			kangarooMarkerCluster.clearMarkers();
    		if(kiwiMarkerCluster)
    			kiwiMarkerCluster.clearMarkers();
    		if(kaguMarkerCluster)
    			kaguMarkerCluster.clearMarkers();
    	}

    	// Adds markers for the files retrieved from the MongoDB database
    	function addMapMarkers() {
    		var icons = {
    			australia: {
    				icon: '/images/map/icons/kangaroo-markers/kangaroo-marker.png'
    			},
    			newZealand: {
    				icon: '/images/map/icons/kiwi-markers/kiwi-marker.png'
    			},
    			newCaledonia: {
    				icon: '/images/map/icons/kagu-markers/kagu-marker.png'
    			}
    		};

    		var infowindow = new google.maps.InfoWindow();

			// For each file returned from the DB, a marker with an info 
			// window is created. Each marker is then added to its 
			// corresponding marker array to be displayed on the map
			fileList.forEach(function(file) {
				var marker = new google.maps.Marker({
					position: new google.maps.LatLng(file.coords.lat, file.coords.lng),
					icon: icons['australia'].icon,
					title: file.name
				});

				var contentString = '<div class="info-window">' +
				'<h3>' + file.name + '</h3>' +
				'<p>Created By: ' + file.createdBy + '</p>' +
				'<p>Size: ' + $filter('formatFileSize')(file.size, 2) + '</p>' +	// using formatFileSize filter to format the file size
				'<p>Last Modified: ' + $filter('date')(file.lastModified, "dd MMMM, yyyy h:mm a") + '</p>';

				// If the file has tags add an unsorted list, listing each tag
				// otherwise skip and exclude the 'tags' label
				if(file.tags.length != 0) { 
					contentString += '<p>Tags: </p>' +
					'<ul>';
					// lists each tag for current file
					file.tags.forEach(function(tag){
						contentString += '<li>' + tag + '</li>';
					});
					contentString += '</ul>';
				}

				contentString += '<a ng-click="vm.viewFile(\'' + file.key + '\')" class="btn btn-success" role="button">View</a> ' +
				'<a ng-click="vm.popupFileDetails(\'' + file.key + '\')" class="btn btn-primary" role="button">Details</a> ' +
				'<a ng-click="vm.confirmDelete(\'' + file.key + '\', \'' + file.name + '\')" class="btn btn-danger" role="button">Delete</a>' +
				'</div>';


				// compiles the HTML so ng-click works
				var compiledContentString = $compile(contentString)($scope)

				marker.addListener('click', function () {
					infowindow.setContent(compiledContentString[0]);
					infowindow.open(map, marker);
				});

				if(marker.icon == '/images/map/icons/kangaroo-markers/kangaroo-marker.png'){
					kangarooMarkers.push(marker);
				} else if(marker.icon == '/images/map/icons/kiwi-markers/kiwi-marker.png'){
					kiwiMarkers.push(marker);
				} else if(marker.icon == '/images/map/icons/kagu-markers/kagu-marker.png'){
					kaguMarkers.push(marker);
				}
			});

			kangarooMarkerCluster = new MarkerClusterer(map, kangarooMarkers, {imagePath: '/images/map/icons/kangaroo-markers/m'});
			kiwiMarkerCluster = new MarkerClusterer(map, kiwiMarkers, {imagePath: '/images/map/icons/kiwi-markers/m'});
			kaguMarkerCluster = new MarkerClusterer(map, kaguMarkers, {imagePath: '/images/map/icons/kagu-markers/m'});
		}

		// Get a signed URL to download the requested file from S3 
		// and if successful, open the signed URL in a new tab
		function viewFile(key) {
			filesService.signDownloadS3(key)
			.then(function(response) {
				$window.open(response.data, '_blank');
			});
		}

		function popupFileDetails(key) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/files/fileDetails/fileDetails.view.html',
				controller: 'fileDetails as vm',
				size: 'lg',
				resolve: {
					key: function () {
						return key;
					}
				}
			});

			modalInstance.result.then(function() {

			});
		}

		function confirmDelete(key, fileName) {
			var deleteFile = $window.confirm("Are you sure you want to delete " + fileName + "?");
			if(deleteFile){
				deleteFileDB(key, fileName);
			}
		}

		function deleteFileDB(key, fileName) {
			filesService.deleteFileDB(key)
			.then(function(response) {
				deleteFileS3(key, fileName);
			});
		}

		function deleteFileS3(key, fileName) {
			filesService.deleteFileS3({key: key})
			.then(function(response) {
				logger.success('File ' + fileName + ' deleted successfully', '', 'Success');
				getFileList();
			});
		}
	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('loginCtrl', loginCtrl);

	loginCtrl.$inject = ['$location', 'authentication', 'events', 'logger'];
	function loginCtrl($location, authentication, events, logger) {
		var vm = this;
		
		// Bindable Functions
		vm.onSubmit = onSubmit;
		vm.login = login;

		// Bindable Data
		vm.credentials = {
			email : "",
			password : ""
		};
		vm.pageHeader = {
			title: 'Sign in to nativeQDA'
		};
		vm.returnPage = $location.search().page || '/';

		///////////////////////////

		function onSubmit() {
			if (!vm.credentials.email || !vm.credentials.password) {
				logger.error("All fields required, please try again", 'Error', 'Error');
				return false;
			} else {
				login();
			}
		};

		function login() {
			events.event({email : vm.credentials.email, desc : "Login"});
			authentication
			.login(vm.credentials)
			.then(function(response) {
				$location.search('page', null);
				$location.path(vm.returnPage);
			});
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('registerCtrl', registerCtrl);

	registerCtrl.$inject = ['$location','authentication', 'logger'];
	function registerCtrl($location, authentication, logger) {
		var vm = this;

		// Bindable Functions
		vm.onSubmit = onSubmit;
		vm.register = register;

		// Bindable Data
		vm.credentials = {
			name : "",
			email : "",
			password : ""
		};
		vm.pageHeader = {
			title: 'Create a new NativeQDA account'
		};
		vm.returnPage = $location.search().page || '/';

		///////////////////////////

		function onSubmit() {
			if (!vm.credentials.name || !vm.credentials.email || !vm.credentials.password) {
				logger.error("All fields required, please try again", '', 'Error');
				return false;
			} else {
				register();
			}
		};

		function register() {
			authentication
			.register(vm.credentials)
			.then(function(){
				$location.search('page', null); 
				$location.path(vm.returnPage);
			});
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('forgotPassCtrl', forgotPassCtrl);

	forgotPassCtrl.$inject = ['authentication', 'logger'];
	function forgotPassCtrl(authentication, logger) {
		var vm = this;

		// Bindable Functions
		vm.onSubmit = onSubmit;

		// Bindable Data
		vm.email = "";
		vm.pageHeader = {
			title: 'Forgot Password'
		};

    	///////////////////////////

		function onSubmit() {
			vm.formError = "";
			if (!vm.email) {
				logger.error('All fields required, please try again', '', 'Error')
				return false;
			} else {
				logger.info('TODO: verify user\'s email and send link to reset password', '', 'TODO')
			}
		};
	}

})();
(function () {

	mapCtrl.$inject = ['filesService', '$scope', '$filter', '$compile', '$window', '$uibModal', 'logger'];
	angular
	.module('nativeQDAApp')
	.controller('mapCtrl', mapCtrl);

	/* @ngInject */
	function mapCtrl (filesService, $scope, $filter, $compile, $window, $uibModal, logger) {
		var vm = this;

		// Bindable Functions
		vm.getFileList = getFileList;
		vm.viewFile = viewFile;
		vm.popupFileDetails = popupFileDetails;
		vm.confirmDelete = confirmDelete;

		// Bindable Data
		vm.map = null;
		vm.markers = [];
		vm.currentMarker = null;

		// To move - may move the majority of the mapping functions into it's own directive
		var LeafIcon = L.Icon.extend({
			options: {
				shadowUrl: 'assets/img/markers/marker-shadow.png',
				iconSize:     [25, 41],
				shadowSize:   [41, 41],
				iconAnchor:   [12.5, 41],
				shadowAnchor: [12.5, 41],
				popupAnchor:  [0, -50]
			}
		});

		var defaultIcon = new LeafIcon({iconUrl: 'assets/img/markers/marker-icon-2x.png'});
		var posIcon = new LeafIcon({iconUrl: 'assets/img/markers/marker-icon-pos.png'});

		activate();

		///////////////////////////

		function activate() {
			initMap();
		}

		function initMap(coords) {
			mapOptions = {
				center: [-34.4054039, 150.87842999999998],	// Default position is UOW
				zoom: 4
			};

			vm.map = L.map('map', mapOptions);

			var maxZoom = 22;

			var mapboxLight = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.light',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxDark = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.dark',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxSatellite = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.satellite',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxStreetsSatellite = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.streets-satellite',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxWheatpaste = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.wheatpaste',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxStreetsBasic = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.streets-basic',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			}).addTo(vm.map);

			var mapboxComic = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.comic',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxOutdoors = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.outdoors',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxRunBikeHike = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.run-bike-hike',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxPencil = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.pencil',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxPirates = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.pirates',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxEmerald = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.emerald',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var mapboxHighContrast = L.tileLayer('https://api.mapbox.com/v4/{map}/{z}/{x}/{y}.png?access_token={accessToken}', {
				map: 'mapbox.high-contrast',
				accessToken: 'pk.eyJ1IjoiYWlkYW4yNzUiLCJhIjoiY2o0MWVrMmFxMGVuNjJxbnlocmV6ZDJ0cCJ9.h77mANND4PPZz9U1z4OC3w',
				maxZoom: maxZoom
			})

			var roadMutant = L.gridLayer.googleMutant({
				maxZoom: maxZoom,
				type:'roadmap'
			})

			var satMutant = L.gridLayer.googleMutant({
				maxZoom: maxZoom,
				type:'satellite'
			});

			var terrainMutant = L.gridLayer.googleMutant({
				maxZoom: maxZoom,
				type:'terrain'
			});

			var hybridMutant = L.gridLayer.googleMutant({
				maxZoom: maxZoom,
				type:'hybrid'
			});

			var trafficMutant = L.gridLayer.googleMutant({
				maxZoom: maxZoom,
				type:'roadmap'
			});

			trafficMutant.addGoogleLayer('TrafficLayer');

			// Might be worth putting this in the user settings, or at least a setting for the default map
			L.control.layers({
				'Mapbox Light': mapboxLight,
				'Mapbox Dark': mapboxDark,
				'Mapbox Satellite': mapboxSatellite,
				'Mapbox Streets Satellite': mapboxStreetsSatellite,
				'Mapbox Wheatpaste': mapboxWheatpaste,
				'Mapbox Streets Basic': mapboxStreetsBasic,
				'Mapbox Outdoors': mapboxOutdoors,
				'Mapbox Run Bike Hike': mapboxRunBikeHike,
				'Mapbox Pencil': mapboxPencil,
				'Mapbox Pirates': mapboxPirates,
				'Mapbox Emerald': mapboxEmerald,
				'Mapbox High Contrast': mapboxHighContrast,
				'Google Roadmap': roadMutant,
				'Google Aerial': satMutant,
				'Google Terrain': terrainMutant,
				'Google Hybrid': hybridMutant,
				'Google Traffic': trafficMutant
			}, {}, {
				collapsed: true
			}).addTo(vm.map);

			geoLocateUser();
			
			getFileList();
		}

		// If getPosition returns successfully update the user's posistion on the map
		function geoLocateUser(position) {
			vm.map.on('locationfound', onLocationFound);
			vm.map.on('locationerror', onLocationError);
			vm.map.locate({setView: true, maxZoom: 15});
		}

		function onLocationFound(response) {
			var radius = response.accuracy / 2;
			var userPos = response.latlng;
			var posMarker = L.marker(userPos, { icon: posIcon, title: 'Your Position' }).addTo(vm.map).bindPopup("You are within " + $filter('formatDistance')(radius) + " meters from this point");
			var posCicle = L.circle(userPos, {
				radius: radius,
				color: '#cb2529'
			});

			// Adds/removes the circle from the marker when focused/unfocused
			posMarker.on("popupopen", function() { 
				posCicle.addTo(vm.map); 
				vm.map.setView(userPos, 18);
			});
			posMarker.on("popupclose", function() { vm.map.removeLayer(posCicle); });

			logger.success('User\'s location found', response, 'Success');
		}

		function onLocationError(error) {
			logger.error(error.message, error, 'Error');
		}

		// Gets all the files from the MongoDB database to be displayed on the map
		function getFileList() {
			filesService.getFileListDB()
			.then(function(response) {
				addMapMarkers(response.data);
			});
		}

		// Adds markers for the files retrieved from the MongoDB database
		function addMapMarkers(fileList) {
			vm.markers = L.markerClusterGroup({showCoverageOnHover: false});

			// For each file returned from the DB, a marker with an info 
			// window is created. Each marker is then added to its 
			// corresponding marker array to be displayed on the map
			fileList.forEach(function(file) {
				var marker = L.marker([file.coords.lat, file.coords.lng], { icon: defaultIcon, title: file.name });

				var contentString = '<div class="info-window">' +
				'<h3>' + file.name + '</h3>' +
				'<p>Created By: ' + file.createdBy + '</p>' +
				'<p>Size: ' + $filter('formatFileSize')(file.size, 2) + '</p>' +	// uses formatFileSize filter to format the file size
				'<p>Last Modified: ' + $filter('date')(file.lastModified, "dd MMMM, yyyy h:mm a") + '</p>';	// uses date filter to format the date

				// If the file has tags add an unsorted list, listing each tag
				// otherwise skip and exclude the 'tags' label
				if(file.tags.length != 0) { 
					contentString += '<p>Tags: </p>' +
					'<ul>';
					// lists each tag for current file
					file.tags.forEach(function(tag){
						contentString += '<li>' + tag + '</li>';
					});
					contentString += '</ul>';
				}

				contentString += '<a ng-click="vm.viewFile(\'' + file.key + '\')" class="btn btn-success" role="button">View</a> ' +
				'<a ng-click="vm.popupFileDetails(\'' + file.key + '\')" class="btn btn-primary" role="button">Details</a> ' +
				'<a ng-click="vm.confirmDelete(\'' + file.key + '\', \'' + file.name + '\')" class="btn btn-danger" role="button">Delete</a>' +
				'</div>';

				// compiles the HTML so ng-click works
				var compiledContentString = $compile(contentString)($scope)

				marker.bindPopup(compiledContentString[0]);

				// When a marker is clicked and it's popup opens, the currentMaker variable is set
				// so the marker can be removed if the file is deleted
				marker.on("popupopen", function() { vm.currentMarker = this; });

				vm.markers.addLayer(marker);
			});
			vm.map.addLayer(vm.markers);
		}

		// Get a signed URL to download the requested file from S3 
		// and if successful, open the signed URL in a new tab
		function viewFile(key) {
			filesService.signDownloadS3(key)
			.then(function(response) {
				$window.open(response.data, '_blank');
			});
		}

		function popupFileDetails(key) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/files/fileDetails/fileDetails.view.html',
				controller: 'fileDetails as vm',
				size: 'lg',
				resolve: {
					key: function () {
						return key;
					}
				}
			});

			modalInstance.result.then(function() {});
		}

		function confirmDelete(key, fileName) {
			var deleteFile = $window.confirm("Are you sure you want to delete " + fileName + "?");
			if(deleteFile){
				deleteFileDB(key, fileName);
			}
		}

		function deleteFileDB(key, fileName) {
			filesService.deleteFileDB(key)
			.then(function(response) {
				deleteFileS3(key, fileName);
			});
		}

		function deleteFileS3(key, fileName) {
			filesService.deleteFileS3({key: key})
			.then(function(response) {
				logger.success('File ' + fileName + ' deleted successfully', '', 'Success');
				removeMapMarker();
			});
		}

		function removeMapMarker() {	
			vm.markers.removeLayer(vm.currentMarker);
		}
	}

})();

/* ====== OLD CODE USING GOOGLE MAPS API ======

// Tried using leaflet instead due to the vector tiles, smoother transitions, and clustering features.
// Can load a variety of tiles to be used including Google Maps and MapBox tiles. 

		function initMap(coords) {
			var position = new google.maps.LatLng(-34.4054039, 150.87842999999998);	// Default position is UOW
			var mapCanvas = document.getElementById('map');
			var mapOptions = {
				center: position,
				zoom: 4,
				panControl: false,
				mapTypeId: google.maps.MapTypeId.ROADMAP,
				mapTypeControl: true,
				mapTypeControlOptions: {
					style: google.maps.MapTypeControlStyle.DEFAULT,
					position: google.maps.ControlPosition.TOP_RIGHT
				}
			}

			map = new google.maps.Map(mapCanvas, mapOptions);

			mapService.getPosition(getGeoData);
			getFileList();
		}

		// If getPosition returns successfully update the user's posistion on the map
		function getGeoData(position) {
			updateUserPos(position.coords.latitude, position.coords.longitude);
		}

		function updateUserPos(lat, lng) {
			var userPos = new google.maps.LatLng(lat, lng);
			var marker = new google.maps.Marker({
				position: userPos,
				map: map,
				title: 'Your Position'
			});
			map.setZoom(13);
			map.panTo(userPos);
		}

		// Gets all the files from the MongoDB database to be displayed on the map
		function getFileList() {
			filesService.getFileListDB()
			.then(function(response) {
				var fileList = response.data;
				clearMarkers();
				addMapMarkers(fileList);
			});
		}

		function clearMarkers() {
			for (var i = 0; i < markers.length; i++) {
				markers[i].setMap(null);
			}
			markers = [];

			if(markerCluster)
				markerCluster.clearMarkers();
		}

		// Adds markers for the files retrieved from the MongoDB database
		function addMapMarkers(fileList) {
			var icons = {
				australia: {
					icon: '/images/map/icons/kangaroo-markers/kangaroo-marker.png'
				},
				newZealand: {
					icon: '/images/map/icons/kiwi-markers/kiwi-marker.png'
				},
				newCaledonia: {
					icon: '/images/map/icons/kagu-markers/kagu-marker.png'
				}
			};

			var icon = {
				url: "icons/method-draw-image (3).svg",
				fillColor: '#eb4139',
				fillOpacity: 1,
				anchor: new google.maps.Point(0,0),
				scaledSize: new google.maps.Size(50,50)
			}

			var infowindow = new google.maps.InfoWindow();

			var markerId = 0;
			// For each file returned from the DB, a marker with an info 
			// window is created. Each marker is then added to its 
			// corresponding marker array to be displayed on the map
			fileList.forEach(function(file) {
				var marker = new google.maps.Marker({
					id: ++markerId,
					position: new google.maps.LatLng(file.coords.lat, file.coords.lng),
					//icon: icon,
					title: file.name
				});

				var contentString = '<div class="info-window">' +
				'<h3>' + file.name + '</h3>' +
				'<p>Created By: ' + file.createdBy + '</p>' +
				'<p>Size: ' + $filter('formatFileSize')(file.size, 2) + '</p>' +	// uses formatFileSize filter to format the file size
				'<p>Last Modified: ' + $filter('date')(file.lastModified, "dd MMMM, yyyy h:mm a") + '</p>';	// uses date filter to format the date

				// If the file has tags add an unsorted list, listing each tag
				// otherwise skip and exclude the 'tags' label
				if(file.tags.length != 0) { 
					contentString += '<p>Tags: </p>' +
					'<ul>';
					// lists each tag for current file
					file.tags.forEach(function(tag){
						contentString += '<li>' + tag + '</li>';
					});
					contentString += '</ul>';
				}

				contentString += '<a ng-click="vm.viewFile(\'' + file.key + '\')" class="btn btn-success" role="button">View</a> ' +
				'<a ng-click="vm.popupFileDetails(\'' + file.key + '\')" class="btn btn-primary" role="button">Details</a> ' +
				'<a ng-click="vm.confirmDelete(\'' + file.key + '\', \'' + file.name + '\', \'' + markerId + '\')" class="btn btn-danger" role="button">Delete</a>' +
				'</div>';

				// compiles the HTML so ng-click works
				var compiledContentString = $compile(contentString)($scope)

				marker.addListener('click', function () {
					infowindow.setContent(compiledContentString[0]);
					infowindow.open(map, marker);
				});

				google.maps.event.addListener(map, 'click', function(){
					infowindow.close(map, marker);
				});

				markers.push(marker);

			});
			markerCluster = new MarkerClusterer(map, markers, {imagePath: '/images/map/icons/kangaroo-markers/m'});
			markerCluster.setMaxZoom(20);
		}

		function removeMapMarker(markerId) {	
			// Find the marker index for markerId, will return -1 if not found 
			var markerIndex = markers.findIndex(function(obj){return obj.id == markerId});

			// Remove the marker from map then remove from markers array
			if (markerIndex > -1) {
				markers[markerIndex].setMap(null);
				markers.splice(markerIndex, 1);
			}

			// Probably don't need to search the markerclusters for the marker index since it should 
			// be identical to the index found earlier for the markers array
			markerIndex = markerCluster.markers_.findIndex(function(obj){return obj.id == markerId});

			// Remove the marker from the markers array in the markerCluster object
			if (markerIndex > -1) {
				markerCluster.markers_.splice(markerIndex, 1);
			}
		}

		// Get a signed URL to download the requested file from S3 
		// and if successful, open the signed URL in a new tab
		function viewFile(key) {
			filesService.signDownloadS3(key)
			.then(function(response) {
				$window.open(response.data, '_blank');
			});
		}

		function popupFileDetails(key) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/files/fileDetails/fileDetails.view.html',
				controller: 'fileDetails as vm',
				size: 'lg',
				resolve: {
					key: function () {
						return key;
					}
				}
			});

			modalInstance.result.then(function() {

			});
		}

		function confirmDelete(key, fileName, markerId) {
			var deleteFile = $window.confirm("Are you sure you want to delete " + fileName + "?");
			if(deleteFile){
				removeMapMarker(markerId);
				oms.unspiderfy();
				//deleteFileDB(key, fileName, markerId);
			}
		}

		function deleteFileDB(key, fileName, markerId) {
			filesService.deleteFileDB(key)
			.then(function(response) {
				//deleteFileS3(key, fileName, markerId);
			});
		}

		function deleteFileS3(key, fileName, markerId) {
			filesService.deleteFileS3({key: key})
			.then(function(response) {
				logger.success('File ' + fileName + ' deleted successfully', '', 'Success');

			});
		}
*/
(function () {

	angular
	.module('nativeQDAApp')
	.controller('dataCtrl', dataCtrl);

	dataCtrl.$inject = ['$window', '$sce', '$uibModal', 'NgTableParams', 'datasetService', 'logger'];
	function dataCtrl($window, $sce, $uibModal, NgTableParams, datasetService, logger) {
		var vm = this;
		
		// Bindable Functions
		vm.getDatasetList = getDatasetList;
		vm.confirmDelete  = confirmDelete;
		vm.popupViewDataset = popupViewDataset;
		vm.popupEditDataset = popupEditDataset;
		vm.popupNewDataset = popupNewDataset;

		// Bindable Data
		vm.dataset = [];
		vm.pageHeader = {
			title: 'Data',
			strapline: 'where the Datasets live'
		};

		activate();

		///////////////////////////

		function activate() {
			getDatasetList();
		}

		function getDatasetList() {
			datasetService.listDatasets()
			.then(function(response) {
				vm.dataset = response.data
				ListDatasets();
			});
		}

		function ListDatasets() {
			vm.tableParams = new NgTableParams({
				sorting: {dateCreated: "desc"}
			}, {
				dataset: vm.dataset
			});
		}

		function confirmDelete(name, datasetId) {
			var doDelete = $window.confirm("Are you sure you want to delete " + name + "?");
			if(doDelete){
				deleteDataset(name, datasetId);
			}
		}

		function deleteDataset(name, datasetId) {
			datasetService.datasetDeleteOne(datasetId)
			.then(function(response) {
				logger.success('Dataset ' + name + ' was successfully deleted' ,'', 'Success');
				removeFromList(datasetId);	// if deleting the dataset was successful, 
			});								// the deleted dataset is removed from the local array
		}

		function removeFromList(datasetId) {
			// Find the dataset index for datasetId, will return -1 if not found 
			var datasetIndex = vm.dataset.findIndex(function(obj){return obj._id == datasetId});

			// Remove the dataset from the vm.dataset array
			if (datasetIndex > -1) {
				vm.dataset.splice(datasetIndex, 1);
			}

			// List the datasets again
			ListDatasets();
		}

		function popupViewDataset(datasetId) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/analysis/data/viewDataset/viewDataset.view.html',
				controller: 'viewDatasetCtrl as vm',
				size: 'lg',
				resolve: {
					datasetId: function () {
						return datasetId;
					}
				}
			});

			modalInstance.result.then(function() {

			});
		}

		function popupEditDataset(name, datasetId) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/analysis/data/editDataset/editDataset.view.html',
				controller: 'editDatasetCtrl as vm',
				size: 'xl'
			});

			modalInstance.result.then(function() {

			});
		}

		function popupNewDataset() {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/analysis/data/newDataset/newDataset.view.html',
				controller: 'newDatasetCtrl as vm',
				size: 'xl'
			});

			modalInstance.result.then(function(data) {
				vm.dataset.push(data)
				ListDatasets();
			});
		}

	}

})();

(function () {

	angular
	.module('nativeQDAApp')
	.controller('newDatasetCtrl', newDatasetCtrl);

	newDatasetCtrl.$inject = ['$uibModalInstance', 'datasetService', 'logger'];
	function newDatasetCtrl ($uibModalInstance, datasetService, logger) {
		var vm = this;

		// Bindable Functions
		vm.onSubmit = onSubmit;
		vm.doCreateDataset = doCreateDataset;

		///////////////////////////

		function onSubmit() {
			if(angular.isDefined(vm.formData)){
				if(!vm.formData.datasetName || !vm.formData.description) {
					logger.error('All fields required, please try again', '', 'Error');
				} else {
					doCreateDataset(vm.formData);
				}
			} else {
				logger.error('All fields required, please try again', '', 'Error');
			}
		};

		function doCreateDataset(formData) {
			datasetService.datasetCreate({			// Using the datasetService, makes an API request to
				name: vm.formData.datasetName,		// the server to add the new dataset
				desc: vm.formData.description
			})
			.then(function (response) {
				logger.success('New Dataset ' + vm.formData.datasetName + ' was created successfully', '', 'Success')
				vm.modal.close(response.data);	// Close modal if dataset was created successfully in DB
			});									// and return the response from the DB (the new dataset)
		};

		vm.modal = {
			close : function(results) {
				$uibModalInstance.close(results);	// Return results
			}, 
			cancel : function() {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('viewDatasetCtrl', viewDatasetCtrl);

	viewDatasetCtrl.$inject = ['$uibModalInstance', 'datasetService', 'datasetId'];
	function viewDatasetCtrl ($uibModalInstance, datasetService, datasetId) {
		var vm = this;
		
		datasetService.datasetReadOne(datasetId)
		.then(function(response) {
			vm.data = response.data;
		});

		vm.modal = {
			close : function() {
				$uibModalInstance.close();
			}, 
			cancel : function() {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('editDatasetCtrl', editDatasetCtrl);

	editDatasetCtrl.$inject = ['$uibModalInstance', 'datasetService'];
	function editDatasetCtrl ($uibModalInstance, datasetService) {
		var vm = this;

		vm.modal = {
			close : function() {
				$uibModalInstance.close();
			}, 
			cancel : function() {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('visualisationCtrl', visualisationCtrl);

	visualisationCtrl.$inject = ['$scope', '$window', 'NgTableParams', '$sce', '$uibModal'];
	function visualisationCtrl ($scope, $window, NgTableParams, $sce, $uibModal) {
		var vm = this;

		// Bindable Functions
		vm.getVisualsList = getVisualsList;
		vm.confirmDelete  = confirmDelete;
		vm.popupNewVisual = popupNewVisual;
		//vm.popupViewVisual = popupViewVisual;
		//vm.popupEditVisual = popupEditVisual;
		
		// Bindable Data
		vm.visuals = [];
		vm.pageHeader = {
			title: 'Visualisation',
			strapline: 'visualise datasets here'
		};

		activate();

		///////////////////////////

		function activate() {
			getVisualsList();
		}

		function getVisualsList() {
			vm.visuals = [
			{ visual: 'Concept Map', visualThumb: 'concept-map-thumb.png', dataSet: 'English vs French', createdBy: 'Anu', dateCreated: '2017/04/25', _id: '1'},
			{ visual: 'Word Cloud', visualThumb: 'word-cloud-thumb.png', dataSet: 'English vs French', createdBy: 'Anu', dateCreated: '2016/01/12', _id: '2'},
			{ visual: 'Chord Diagram', visualThumb: 'chord-diagram-thumb.png', dataSet: 'English vs French', createdBy: 'Anu',  dateCreated: '2016/03/29', _id: '3'},
			{ visual: 'Concept Map', visualThumb: 'concept-map-thumb.png', dataSet: 'Kanaks - Drehu', createdBy: 'Michael', dateCreated: '2016/09/15', _id: '4'},
			{ visual: 'Concept Map', visualThumb: 'concept-map-thumb.png', dataSet: 'English vs French', createdBy: 'Anu',  dateCreated: '2017/04/25', _id: '5'},
			{ visual: 'Word Frequency Chart', visualThumb: 'bar-chart-thumb.png', dataSet: 'Kanaks - Drehu', createdBy: 'Michael', dateCreated: '2016/01/12', _id: '6'},
			{ visual: 'Word Tree', visualThumb: 'word-tree-thumb.png', dataSet: 'Qualitative study of the Moriori language', createdBy: 'Michael', dateCreated: '2017/03/29', _id: '7'}
			];
			ListVisuals();
		}

		function ListVisuals() {
			vm.tableParams = new NgTableParams({
				sorting: {dateCreated: "desc"}
			}, {
				dataset: vm.visuals
			});
		}

		function confirmDelete(name, visualId) {
			var doDelete = $window.confirm("Are you sure you want to delete " + name + "?");
			if(doDelete){
				deleteVisual(visualId);
			}
		};

		function deleteVisual(visualId) {
			// Add DB component
			removeFromList(visualId);	// if deleting the visual was successful, 
		}								// the deleted visual is removed from the local array
		
		function removeFromList(visualId) {
			// Find the visual index for visualId, will return -1 if not found 
			var visualIndex = vm.visuals.findIndex(function(obj){return obj._id == visualId});

			// Remove the visual from the vm.visuals array
			if (visualIndex > -1) {
				vm.visuals.splice(visualIndex, 1);
			}

			// List the visuals again
			ListVisuals();
		}

		function popupNewVisual() {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/analysis/visualisation/newVisualisation/newVisualisation.view.html',
				controller: 'newVisualisationCtrl as vm',
				size: 'xl'
			});
			
			modalInstance.result.then(function () {

			});
		};
	}

})();

(function () {

	angular
	.module('nativeQDAApp')
	.controller('newVisualisationCtrl', newVisualisationCtrl);

	newVisualisationCtrl.$inject = ['$uibModalInstance'];
	function newVisualisationCtrl ($uibModalInstance) {
		var vm = this;
		
		// Bindable Functions
		vm.onSubmit = onSubmit;

		///////////////////////////

		function onSubmit() {
			vm.formError = "";
			if(angular.isDefined(vm.formData)){
				if(!vm.formData.visualisationName) {
					vm.formError = "All fields required, please try again";
					return false;
				} else {
					console.log("Create Visualisation!")
				}
			} else {
				vm.formError = "All fields required, please try again";
				return false;
			}
		};

		vm.modal = {
			close : function (result) {
				$uibModalInstance.close(result);
			}, 
			cancel : function () {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('CompleteSurveyCtrl', CompleteSurveyCtrl);

	function CompleteSurveyCtrl() {
		var vm = this;

		vm.surveyCode = "";

		vm.onSubmit = function () {
			vm.formError = "";
			if (!vm.surveyCode) {
				vm.formError = "All fields required, please try again";
				return false;
			} else {
				console.log("Find survey and display to user!")
			}
		};
	}

})();

(function () {

	angular
	.module('nativeQDAApp')
	.controller('surveyCtrl', surveyCtrl);

	surveyCtrl.$inject = ['$scope', '$window', 'NgTableParams', '$sce', '$uibModal'];
	function surveyCtrl ($scope, $window, NgTableParams, $sce, $uibModal) {
		var vm = this;
		
		vm.pageHeader = {
			title: 'Surveys',
			strapline: 'for the masses'
		};

		vm.popupNewSurveyForm = function () {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/survey/newSurvey/newSurvey.view.html',
				controller: 'newSurveyCtrl as vm',
				size: 'xl'
			});
			
			modalInstance.result.then(function () {

			});
		};

		var dataset = [
		{ survey: 'Survey', createdBy: 'Anu', responses: 12, dateCreated: '2017/05/26', command: 'id1'},
		{ survey: 'Survey2', createdBy: 'Michael', responses: 50, dateCreated: '2017/05/02', command: 'id1'},
		{ survey: 'Survey3', createdBy: 'Michael', responses: 23, dateCreated: '2017/02/12', command: 'id1'},
		{ survey: 'Survey4', createdBy: 'Anu', responses: 50, dateCreated: '2017/02/15', command: 'id1'},
		{ survey: 'Survey5', createdBy: 'Holly', responses: 11, dateCreated: '2017/04/02', command: 'id1'},
		{ survey: 'Survey6', createdBy: 'Anu', responses: 1, dateCreated: '2017/01/11', command: 'id1'},
		{ survey: 'Survey7', createdBy: 'Michael', responses: 100, dateCreated: '2017/01/23', command: 'id1'},
		];

		vm.tableParams = new NgTableParams({}, { dataset: dataset});

		$scope.confirmDelete = function () {
			$window.confirm("Are ya sure?")
		};

	}

})();

(function () {

	angular
	.module('nativeQDAApp')
	.controller('newSurveyCtrl', newSurveyCtrl);

	newSurveyCtrl.$inject = ['$uibModalInstance'];
	function newSurveyCtrl ($uibModalInstance) {
		var vm = this;
				
		vm.onSubmit = function () {
			vm.formError = "";
			if(angular.isDefined(vm.formData)){
				if(!vm.formData.surveyName) {
					vm.formError = "All fields required, please try again";
					return false;
				} else {
					console.log("Create Survey!")
				}
			} else {
				vm.formError = "All fields required, please try again";
				return false;
			}
		};

		vm.modal = {
			close : function (result) {
				$uibModalInstance.close(result);
			}, 
			cancel : function () {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('heatmapCtrl', heatmapCtrl);

	heatmapCtrl.$inject = ['$scope', 'geolocation', 'GoogleMapsInitialiser', 'authentication', 'events'];
	function heatmapCtrl ($scope, geolocation, GoogleMapsInitialiser, authentication, events) {
		var vm = this;
		var lat = -33.848192;
		var lng = 151.061857;
		var mapZoom = 10;

		events.event({email : authentication.currentUser().email});

		vm.bothOver = true;
		vm.fatherOver = true;
		vm.MotherOver = true;
		vm.bothAus = true;

		initMap(lat ,lng);

		function initMap(lat, lng) {
			GoogleMapsInitialiser.mapsInitialised
			.then(function(){
				var location = new google.maps.LatLng(lat, lng);
				var mapCanvas = document.getElementById('map');
				var mapOptions = {
					center: location,
					zoom: mapZoom,
					panControl: false,
					mapTypeId: google.maps.MapTypeId.ROADMAP,
					mapTypeControl: true,
					mapTypeControlOptions: {
						style: google.maps.MapTypeControlStyle.DEFAULT,
						position: google.maps.ControlPosition.TOP_RIGHT
					},
				}

				var bothOverData = [
				// Inner West - Inner West, NSW, Australia
				{location: new google.maps.LatLng(-33.8584827,151.12866859999997), weight: 9029},
				// Albury - Albury NSW 2640, Australia
				{location: new google.maps.LatLng(-36.0737293,146.91354179999996), weight: 358},
				// Ryde - Ryde NSW 2112, Australia
				{location: new google.maps.LatLng(-33.81527799999999,151.10111099999995), weight: 3235},
				// Baulkham Hills & Hawkesbury - Baulkham Hills NSW 2153, Australia
				{location: new google.maps.LatLng(-33.76288,150.99212), weight: 7427},
				// Blacktown - Blacktown NSW 2148, Australia
				{location: new google.maps.LatLng(-33.771,150.9063), weight: 21538},
				// City & Inner South - Sydney NSW 2000, Australia
				{location: new google.maps.LatLng(-33.8688197,151.20929550000005), weight: 4163},
				// North Sydney & Hornsby - North Sydney NSW 2060, Australia
				{location: new google.maps.LatLng(-33.83965,151.20541000000003), weight: 8865},
				// Northern Beaches - Northern Beaches, NSW, Australia
				{location: new google.maps.LatLng(-33.68919759999999,151.26853819999997), weight: 1618},
				// Outer Southwest - Sydney Southwest Private Hospital - 40 Bigge St, Liverpool NSW 2170, Australia
				{location: new google.maps.LatLng(-33.91735159999999,150.9283736), weight: 5627},
				// Outer West Blue Mountains - Blue Mountains, New South Wales, Australia
				{location: new google.maps.LatLng(-33.49999729999999,150.2499997), weight: 3383},
				// Parramatta - Parramatta NSW 2150, Australia
				{location: new google.maps.LatLng(-33.81499999999999,151.00111100000004), weight: 27386},
				// South West - Elizabeth Hills NSW 2171, Australia
				{location: new google.maps.LatLng(-33.90006659999999,150.84785220000003), weight: 11435},
				// Sutherland - Sutherland NSW 2232, Australia
				{location: new google.maps.LatLng(-34.03314,151.05830000000003), weight: 1552},
				// Central Coast - Central Coast NSW, Australia
				{location: new google.maps.LatLng(-33.3529519,151.44354739999994), weight: 979},
				// Greater Sydney - Sydney Metropolitan Area, NSW, Australia
				{location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 121088},
				];

				var fatherOverDate = [
				// Inner West - Inner West, NSW, Australia
				{location: new google.maps.LatLng(-33.8584827,151.12866859999997), weight: 187},
				// Albury - Albury NSW 2640, Australia
				{location: new google.maps.LatLng(-36.0737293,146.91354179999996), weight: 18},
				// Ryde - Ryde NSW 2112, Australia
				{location: new google.maps.LatLng(-33.81527799999999,151.10111099999995), weight: 64},
				// Baulkham Hills & Hawkesbury - Baulkham Hills NSW 2153, Australia
				{location: new google.maps.LatLng(-33.76288,150.99212), weight: 141},
				// Blacktown - Blacktown NSW 2148, Australia
				{location: new google.maps.LatLng(-33.771,150.9063), weight: 224},
				// City & Inner South - Sydney NSW 2000, Australia
				{location: new google.maps.LatLng(-33.8688197,151.20929550000005), weight: 130},
				// North Sydney & Hornsby - North Sydney NSW 2060, Australia
				{location: new google.maps.LatLng(-33.83965,151.20541000000003), weight: 202},
				// Northern Beaches - Northern Beaches, NSW, Australia
				{location: new google.maps.LatLng(-33.68919759999999,151.26853819999997), weight: 96},
				// Outer Southwest - Sydney Southwest Private Hospital - 40 Bigge St, Liverpool NSW 2170, Australia
				{location: new google.maps.LatLng(-33.91735159999999,150.9283736), weight: 132},
				// Outer West Blue Mountains - Blue Mountains, New South Wales, Australia
				{location: new google.maps.LatLng(-33.49999729999999,150.2499997), weight: 165},
				// Parramatta - Parramatta NSW 2150, Australia
				{location: new google.maps.LatLng(-33.81499999999999,151.00111100000004), weight: 179},
				// South West - Elizabeth Hills NSW 2171, Australia
				{location: new google.maps.LatLng(-33.90006659999999,150.84785220000003), weight: 123},
				// Sutherland - Sutherland NSW 2232, Australia
				{location: new google.maps.LatLng(-34.03314,151.05830000000003), weight: 107},
				// Central Coast - Central Coast NSW, Australia
				{location: new google.maps.LatLng(-33.3529519,151.44354739999994), weight: 128},
				// Greater Sydney - Sydney Metropolitan Area, NSW, Australia
				{location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 2219},
				];

				var motherOverDate = [
				// Inner West - Inner West, NSW, Australia
				{location: new google.maps.LatLng(-33.8584827,151.12866859999997), weight: 129},
				// Albury - Albury NSW 2640, Australia
				{location: new google.maps.LatLng(-36.0737293,146.91354179999996), weight: 15},
				// Ryde - Ryde NSW 2112, Australia
				{location: new google.maps.LatLng(-33.81527799999999,151.10111099999995), weight: 53},
				// Baulkham Hills & Hawkesbury - Baulkham Hills NSW 2153, Australia
				{location: new google.maps.LatLng(-33.76288,150.99212), weight: 127},
				// Blacktown - Blacktown NSW 2148, Australia
				{location: new google.maps.LatLng(-33.771,150.9063), weight: 151},
				// City & Inner South - Sydney NSW 2000, Australia
				{location: new google.maps.LatLng(-33.8688197,151.20929550000005), weight: 106},
				// North Sydney & Hornsby - North Sydney NSW 2060, Australia
				{location: new google.maps.LatLng(-33.83965,151.20541000000003), weight: 173},
				// Northern Beaches - Northern Beaches, NSW, Australia
				{location: new google.maps.LatLng(-33.68919759999999,151.26853819999997), weight: 60},
				// Outer Southwest - Sydney Southwest Private Hospital - 40 Bigge St, Liverpool NSW 2170, Australia
				{location: new google.maps.LatLng(-33.91735159999999,150.9283736), weight: 83},
				// Outer West Blue Mountains - Blue Mountains, New South Wales, Australia
				{location: new google.maps.LatLng(-33.49999729999999,150.2499997), weight: 98},
				// Parramatta - Parramatta NSW 2150, Australia
				{location: new google.maps.LatLng(-33.81499999999999,151.00111100000004), weight: 145},
				// South West - Elizabeth Hills NSW 2171, Australia
				{location: new google.maps.LatLng(-33.90006659999999,150.84785220000003), weight: 98},
				// Sutherland - Sutherland NSW 2232, Australia
				{location: new google.maps.LatLng(-34.03314,151.05830000000003), weight: 59},
				// Central Coast - Central Coast NSW, Australia
				{location: new google.maps.LatLng(-33.3529519,151.44354739999994), weight: 95},
				// Greater Sydney - Sydney Metropolitan Area, NSW, Australia
				{location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 1681},
				];

				var bothAusData = [
				// Inner West - Inner West, NSW, Australia
				{location: new google.maps.LatLng(-33.8584827,151.12866859999997), weight: 68},
				// Albury - Albury NSW 2640, Australia
				{location: new google.maps.LatLng(-36.0737293,146.91354179999996), weight: 13},
				// Ryde - Ryde NSW 2112, Australia
				{location: new google.maps.LatLng(-33.81527799999999,151.10111099999995), weight: 45},
				// Baulkham Hills & Hawkesbury - Baulkham Hills NSW 2153, Australia
				{location: new google.maps.LatLng(-33.76288,150.99212), weight: 66},
				// Blacktown - Blacktown NSW 2148, Australia
				{location: new google.maps.LatLng(-33.771,150.9063), weight: 99},
				// City & Inner South - Sydney NSW 2000, Australia
				{location: new google.maps.LatLng(-33.8688197,151.20929550000005), weight: 62},
				// North Sydney & Hornsby - North Sydney NSW 2060, Australia
				{location: new google.maps.LatLng(-33.83965,151.20541000000003), weight: 116},
				// Northern Beaches - Northern Beaches, NSW, Australia
				{location: new google.maps.LatLng(-33.68919759999999,151.26853819999997), weight: 65},		
				// Outer Southwest - Sydney Southwest Private Hospital - 40 Bigge St, Liverpool NSW 2170, Australia
				{location: new google.maps.LatLng(-33.91735159999999,150.9283736), weight: 69},
				// Outer West Blue Mountains - Blue Mountains, New South Wales, Australia
				{location: new google.maps.LatLng(-33.49999729999999,150.2499997), weight: 96},
				// Parramatta - Parramatta NSW 2150, Australia
				{location: new google.maps.LatLng(-33.81499999999999,151.00111100000004), weight: 84},
				// South West - Elizabeth Hills NSW 2171, Australia
				{location: new google.maps.LatLng(-33.90006659999999,150.84785220000003), weight: 43},
				// Sutherland - Sutherland NSW 2232, Australia
				{location: new google.maps.LatLng(-34.03314,151.05830000000003), weight: 47},
				// Central Coast - Central Coast NSW, Australia
				{location: new google.maps.LatLng(-33.3529519,151.44354739999994), weight: 106},
				// Greater Sydney - Sydney Metropolitan Area, NSW, Australia
				{location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 1110},
				];

				var map = new google.maps.Map(mapCanvas, mapOptions);

				var heatmap = new google.maps.visualization.HeatmapLayer();
				var gradient = null;
				
				vm.radiusSlider = {
					value: 100,
					options: {
						floor: 0,
						ceil: 200,
						onChange: function() {
							heatmap.set('radius', vm.radiusSlider.value);
						}
					}
				};

				vm.opacitySlider = {
					value: 0.6,
					options: {
						floor: 0,
						ceil: 1,
						step: 0.01,
						precision: 10,
						onChange: function() {
							heatmap.set('opacity', vm.opacitySlider.value);
						}
					}
				};

				vm.updateMap = function(){
					if(heatmap){
						heatmap.setMap(null);
					}

					var heatmapData = []

					if(vm.bothOver){
						Array.prototype.push.apply(heatmapData, bothOverData);
					}
					if(vm.fatherOver){
						Array.prototype.push.apply(heatmapData, fatherOverDate);
					}
					if(vm.MotherOver){
						Array.prototype.push.apply(heatmapData, motherOverDate);
					}
					if(vm.bothAus){
						Array.prototype.push.apply(heatmapData, bothAusData);
					}

					heatmap.setData(heatmapData);
					heatmap.setOptions({
						radius: vm.radiusSlider.value,
						opacity: vm.opacitySlider.value,
						gradient: gradient
					});
					heatmap.setMap(map);
				}
				
				vm.removeGrtSyd = function(){
					if(vm.rmGrtSyd) {
						bothOverData.pop();
						fatherOverDate.pop();
						motherOverDate.pop();
						bothAusData.pop();
					} else {
						bothOverData.push({location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 121088});
						fatherOverDate.push({location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 2219});
						motherOverDate.push({location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 1681});
						bothAusData.push({location: new google.maps.LatLng(-33.88175470000001,150.8609358), weight: 1110});
					}
					vm.updateMap();
				}

				vm.changeGradient = function(){
					if(vm.changeGrad) {
						gradient = [
						'rgba(0, 255, 255, 0)',
						'rgba(0, 255, 255, 1)',
						'rgba(0, 191, 255, 1)',
						'rgba(0, 127, 255, 1)',
						'rgba(0, 63, 255, 1)',
						'rgba(0, 0, 255, 1)',
						'rgba(0, 0, 223, 1)',
						'rgba(0, 0, 191, 1)',
						'rgba(0, 0, 159, 1)',
						'rgba(0, 0, 127, 1)',
						'rgba(63, 0, 91, 1)',
						'rgba(127, 0, 63, 1)',
						'rgba(191, 0, 31, 1)',
						'rgba(255, 0, 0, 1)'
						]
					} else {
						gradient = null;
					}
					vm.updateMap();	
				}

				vm.updateMap();	
			});
}
}


})();
(function () { 

	'use strict';

	angular
	.module('nativeQDAApp')
	.controller('filesCtrl', filesCtrl);
	

	filesCtrl.$inject = ['mapService', '$http', '$window', '$scope', '$uibModal', 'Upload', 'NgTableParams', 'filesService', 'authentication', 'logger'];
	function filesCtrl (mapService, $http, $window, $scope, $uibModal, Upload, NgTableParams, filesService, authentication, logger) {
		var vm = this;

		// Bindable Functions
		vm.geocodeAddress = geocodeAddress;
		vm.getFileListS3 = getFileListS3;
		vm.viewFile = viewFile;
		vm.onFileSelect = onFileSelect;
		vm.confirmDelete = confirmDelete;
		vm.popupFileDetails = popupFileDetails;

		// Bindable Data
		vm.map = null;
		vm.marker = null;
		vm.fileList = [];
		vm.lat = -34.4054039;	// Default position is UOW
		vm.lng = 150.87842999999998;
		vm.tags = [];
		vm.address = '';
		vm.formattedAddress = '';
		vm.currentPercentage = '0';

		activate();

    	///////////////////////////

    	function activate() {
    		initMap();
    		getFileList();
    	}

    	function initMap() {
    		var position = new google.maps.LatLng(vm.lat, vm.lng);
    		var mapCanvas = document.getElementById('map-files-page');
    		var mapOptions = {
    			center: position,
    			zoom: 4,
    			panControl: false,
    			mapTypeId: google.maps.MapTypeId.ROADMAP,
    			mapTypeControl: true,
    			mapTypeControlOptions: {
    				style: google.maps.MapTypeControlStyle.DEFAULT,
    				position: google.maps.ControlPosition.TOP_RIGHT
    			}
    		}

    		vm.map = new google.maps.Map(mapCanvas, mapOptions);

    		vm.marker = new google.maps.Marker({
    			draggable: true,
    			position: position,
    			map: vm.map,
    			title: 'Latitude: ' + vm.lat + '\nLongitude: ' + vm.lng
    		});

    		google.maps.event.addListener(vm.marker, 'dragend', function(event) {
    			vm.lat = event.latLng.lat();
    			vm.lng = event.latLng.lng();
    			vm.marker.setTitle('Latitude: ' + vm.lat + '\nLongitude: ' + vm.lng);
    			$scope.$apply();
    		});

    		google.maps.event.addListener(vm.map, 'click', function(event) {
    			vm.lat = event.latLng.lat();
    			vm.lng = event.latLng.lng();
    			vm.marker.setPosition(event.latLng);
    			vm.marker.setTitle('Latitude: ' + vm.lat + '\nLongitude: ' + vm.lng);
    			$scope.$apply();
    		});

    		mapService.getPosition(getGeoData);
    	}

    	function getGeoData(position) {
    		vm.lat = position.coords.latitude;
    		vm.lng = position.coords.longitude;
    		updateUserPos();
    	}

    	function updateUserPos() {
    		var userPos = new google.maps.LatLng(vm.lat, vm.lng);
    		vm.marker.setPosition(userPos);
    		vm.marker.setTitle('Latitude: ' + vm.lat + '\nLongitude: ' + vm.lng);
    		vm.map.setZoom(13);
    		vm.map.panTo(userPos);
    		$scope.$apply();
    	}

    	function geocodeAddress() {
    		var geocoder = new google.maps.Geocoder();
    		geocoder.geocode({'address': vm.address}, function(results, status) {
    			if (status === 'OK') {
    				vm.lat = results[0].geometry.location.lat();
    				vm.lng = results[0].geometry.location.lng();
    				vm.formattedAddress = results[0].formatted_address;

    				vm.marker.setPosition(results[0].geometry.location);
    				vm.marker.setTitle('Latitude: ' + vm.lat + '\nLongitude: ' + vm.lng);

    				vm.map.panTo(new google.maps.LatLng(vm.lat,vm.lng));

    				$scope.$apply();
    			} else if (status === 'ZERO_RESULTS') {
    				toastr.warning('Warning: Address not found', 'Warning', { "positionClass": "toast-top-center"})
    			} else {
    				toastr.error('Geocode failed: ' + status, 'Error', { "positionClass": "toast-top-center"})
    			}
    		});
    	}

		// Gets all the files from the MongoDB database to be displayed on the map
		function getFileList() {
			filesService.getFileListDB()
			.then(function(response) {
				vm.fileList = response.data;
				listFiles();
			});
		}

		function listFiles() {
			vm.tableParams = new NgTableParams({
				sorting: {lastModified: "desc"}
			}, {
				dataset: vm.fileList
			});
		}

		// Gets signed URL to download the requested file from S3 
		// if successful, opens the signed URL in a new tab
		function viewFile(key) {
			filesService.signDownloadS3(key)
			.then(function(response) {
				$window.open(response.data, '_blank');
			});
		}

		function confirmDelete(name, key) {
			var doDelete = $window.confirm("Are you sure you want to delete " + name + "?");
			if(doDelete){
				deleteFileDB(name, key);
			}
		}

		function deleteFileDB(name, key) {
			filesService.deleteFileDB(key)
			.then(function(response) {
				deleteFileS3(name, key);
			});
		}

		function deleteFileS3(name, key) {
			filesService.deleteFileS3({key: key})
			.then(function(response) {
				logger.success('File ' + name + ' deleted successfully', '', 'Success');
				getFileList();
			});
		}

		// Gets a signed URL for uploading a file then uploads the file to S3 with this signed URL
		// If successful, the file info is then posted to the DB
		// need to make neater
		function onFileSelect(uploadFiles) {
			if (uploadFiles.length > 0) {
				var filename = uploadFiles[0].name;
				var type = uploadFiles[0].type;
				var query = {
					filename: filename,
					type: type
				};
				filesService.signUploadS3(query)
				.then(function(result) {
					Upload.upload({
						method: 'POST',
						url: result.data.url, 
						fields: result.data.fields, 
						file: uploadFiles[0]
					})
					.progress(function(evt) {
						vm.currentPercentage = parseInt(100.0 * evt.loaded / evt.total);
					})
					.then(function(response) {
						console.log(response.config.file.name + ' successfully uploaded to S3');
						// parses XML data response to jQuery object to be stored in the database
						var xml = $.parseXML(response.data);
						// maps the tag obects to an array of strings to be stored in the database
						var tagStrings = vm.tags.map(function(item) {
							return item['text'];
						});
						var key = result.data.fields.key;
						var url = result.data.url + '/' + key;
						var fileDetails = {
							name : filename,
							key : key,
							size : response.config.file.size,
							url : url,
							createdBy : authentication.currentUser().name,
							lat : vm.lat,
							lng : vm.lng,
							tags : tagStrings
						}
						filesService.addFileDB(fileDetails)
						.then(function(response) {
							console.log(filename + ' successfully added to DB');
							logger.success(filename + ' successfully uploaded', '', 'Success');
							getFileList();
						});
					}, function(error) {
						var xml = $.parseXML(error.data);
						logger.error($(xml).find("Message").text(), '', 'Error');
					});
				});
			}
		}

		function popupFileDetails(key) {
			var modalInstance = $uibModal.open({
				templateUrl: '/pages/files/fileDetails/fileDetails.view.html',
				controller: 'fileDetails as vm',
				size: 'lg',
				resolve: {
					key: function () {
						return key;
					}
				}
			});

			modalInstance.result.then(function() {

			});
		}

		// need to work on back end still
		// Thinking if S3 and the DB become unsynced, such as a file in the DB that's 
		// not on S3, or vice-versa, this will re-sync them. Maybe provide settings button
		// to re-sync or do it periodically (maybe when a user logs in?).

		/*
		function syncDB(data) {
			vm.fileList = data.Contents;

			vm.fileList.forEach(function(file) {
				filesService.syncDBwithS3({key: file.Key})
				.then(function(response) {
					console.log(response);
				}, function(err) {
					console.log(err);
				});
			});

			doListFiles(data);
		}
		*/

		// not using at the moment, getting file details from DB 
		// Amazon S3 free tier only provides 2000 put requests and 20000 get requests a month
		function getFileListS3() {
			filesService.getFileListS3()
			.then(function(response) {
				//syncDB(response.data);
				doListFilesS3(response.data.Contents);
			}, function(err) {
				console.log(err);
			});
		}
	}

})();
(function () {

	angular
	.module('nativeQDAApp')
	.controller('fileDetails', fileDetails);

	fileDetails.$inject = ['$uibModalInstance', '$window', 'key', 'filesService'];
	function fileDetails ($uibModalInstance, $window, key, filesService) {
		var vm = this;

		// Bindable Functions
		vm.updateAclS3 = updateAclS3;

		// Bindable Data
		vm.isSubmittingButton = null;	// variables for button animation - ng-bs-animated-button
		vm.resultButton = null;
		vm.makePublicOptions = { buttonDefaultText: 'Make Public', animationCompleteTime: 1000 };
		vm.makePrivateOptions = { buttonDefaultText: 'Make Private', animationCompleteTime: 1000 };

		activate();

		///////////////////////////

		function activate() {
			filesService.fileReadOneDB(key)
			.then(function(response) {
				vm.file = response.data;
			});
		}		

		// Updates the Access Control List so the file is either private or public
		// There are other options also avaliable - check aws-sdk js api documentation
		// S3 ACL Update - if successful, update database ACL
		function updateAclS3(key, acl) {
			vm.isSubmittingButton = true;
			filesService.objectAclS3({key: key, acl: acl})
			.then(function(response) {
				updateAclDB(key, acl);
			}, function(err) {
				vm.resAclBtn = 'error';
			});
		}

		// Database ACL Update
		function updateAclDB(key, acl) {
			filesService.objectAclDB({key: key, acl: acl})
			.then(function(response) {
				vm.resultButton = 'success';
				vm.file.acl = acl
			}, function(err) {
				vm.resultButton = 'error';
			});
		}

		vm.modal = {
			close : function() {
				$uibModalInstance.close();
			}, 
			cancel : function() {
				$uibModalInstance.dismiss('cancel');
			}
		};

	}

})();
(function () { 

	angular
	.module('nativeQDAApp')
	.controller('settingsCtrl', settingsCtrl);
	
	function settingsCtrl () {
		var vm = this;

		vm.pageHeader = {
			title: 'Settings',
			strapline: 'change how things work'
		};


	}


})();